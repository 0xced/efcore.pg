using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace E2ETest.Namespace
{
    public partial class PostgresSpecificContext : DbContext
    {
        public virtual DbSet<Foo> Foo { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseNpgsql(@"{{connectionString}}");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("pgcrypto")
                .HasPostgresExtension("uuid-ossp");

            modelBuilder.Entity<Foo>(entity =>
            {
                entity.ToTable("foo");

                entity.ForNpgsqlHasComment("foo comment");

                entity.HasIndex(e => e.A)
                    .HasName("ix_a");

                entity.HasIndex(e => e.B)
                    .HasName("ix_b")
                    .ForNpgsqlHasMethod("hash");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .ForNpgsqlHasComment("b comment");
            });
        }
    }
}