using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace E2ETest.Namespace
{
    public partial class ColumnsWithSequencesContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            #warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            optionsBuilder.UseNpgsql(@"{{connectionString}}");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IDNonSerialSequence>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval('\"IDSomeSequence\"'::regclass)");
            });

            modelBuilder.Entity<NonSerialSequence>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.SomeField).HasDefaultValueSql("nextval('\"SomeSequence\"'::regclass)");
            });

            modelBuilder.Entity<SerialSequence>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.SomeField).ValueGeneratedOnAdd();
            });

            modelBuilder.HasSequence("IDSomeSequence");

            modelBuilder.HasSequence("SomeSequence");
        }

        public virtual DbSet<IDNonSerialSequence> IDNonSerialSequence { get; set; }
        public virtual DbSet<IDSerialSequence> IDSerialSequence { get; set; }
        public virtual DbSet<NonSerialSequence> NonSerialSequence { get; set; }
        public virtual DbSet<SerialSequence> SerialSequence { get; set; }
    }
}